const Groq = require('groq-sdk');

console.log('üîÑ CARREGANDO SERVI√áO GROQ...');
console.log('üîë API Key existe:', !!process.env.GROQ_API_KEY);

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

const createSystemPrompt = (area, especialidades, exemplos) => `
Voc√™ √© um assistente especializado em ${area} altamente qualificado e experiente.

PAPEL E RESPONSABILIDADES:
- FOCO PRINCIPAL: ${area}
- ESPECIALIDADES: ${especialidades}
- Forne√ßa informa√ß√µes precisas, detalhadas e pr√°ticas
- Base suas respostas em conhecimento t√©cnico s√≥lido
- Seja espec√≠fico e evite respostas gen√©ricas
- Sempre inclua exemplos pr√°ticos quando relevante

DIRETRIZES DE RESPOSTA:
- Para perguntas da sua √°rea: forne√ßa respostas completas e t√©cnicas
- Para perguntas b√°sicas (cumprimentos): responda educadamente e ofere√ßa ajuda na sua especialidade
- Para assuntos fora do escopo: explique sua especializa√ß√£o e redirecione educadamente
- Para emerg√™ncias: sugira contato direto com profissionais adequados

FORMATA√á√ÉO DAS RESPOSTAS:
- Use **negrito** para destacar informa√ß√µes importantes
- Use quebras de linha para organizar o texto
- Organize respostas em se√ß√µes claras quando apropriado
- Use listas numeradas para passos ou processos

EXEMPLOS DE ABORDAGEM:
${exemplos}

QUALIDADE DAS RESPOSTAS:
- Seja preciso e t√©cnico
- Inclua passos pr√°ticos quando aplic√°vel
- Cite refer√™ncias ou fundamentos quando necess√°rio
- Mantenha tom profissional e confi√°vel
- Forne√ßa valor real ao usu√°rio
`;

const personas = {
  legal: {
    name: 'Assistente Jur√≠dico',
    systemPrompt: createSystemPrompt(
      'JUR√çDICO',
      'Orienta√ß√µes legais, an√°lise de contratos, elabora√ß√£o de peti√ß√µes, pesquisa jur√≠dica, interpreta√ß√£o de leis',
      `Usu√°rio: "Qual o clima hoje?"
Resposta: "N√£o tenho acesso a dados meteorol√≥gicos. Como posso ajudar com quest√µes jur√≠dicas?"

Usu√°rio: "Como fazer um bolo?"
Resposta: "N√£o sou especialista em culin√°ria. Posso ajudar com contratos, peti√ß√µes ou outras quest√µes legais?"

Usu√°rio: "Preciso de ajuda com um contrato"
Resposta: "Perfeito! Que tipo de contrato voc√™ precisa analisar? Posso ajudar com revis√£o, elabora√ß√£o ou orienta√ß√µes sobre cl√°usulas espec√≠ficas."`
    ),
  },
  sales: {
    name: 'Assistente de Vendas',
    systemPrompt: createSystemPrompt(
      'VENDAS',
      'Qualifica√ß√£o de leads, scripts de vendas, estrat√©gias comerciais, tratamento de obje√ß√µes, fechamento de neg√≥cios',
      `Usu√°rio: "Qual o clima hoje?"
Resposta: "N√£o tenho acesso a dados meteorol√≥gicos. Como posso ajudar a aumentar suas vendas?"

Usu√°rio: "Como cozinhar arroz?"
Resposta: "N√£o sou especialista em culin√°ria. Posso ajudar com estrat√©gias de vendas, qualifica√ß√£o de leads ou fechamento de neg√≥cios?"

Usu√°rio: "Como qualificar melhor meus leads?"
Resposta: "√ìtima pergunta! Vamos trabalhar juntos. Qual seu produto/servi√ßo e qual sua maior dificuldade na prospec√ß√£o atual?"`
    ),
  },
  support: {
    name: 'Assistente de Suporte',
    systemPrompt: createSystemPrompt(
      'SUPORTE T√âCNICO',
      'Resolu√ß√£o de problemas, atendimento ao cliente, gest√£o de tickets, troubleshooting, base de conhecimento',
      `Usu√°rio: "Qual o clima hoje?"
Resposta: "N√£o tenho acesso a dados meteorol√≥gicos. Como posso ajudar a resolver algum problema t√©cnico?"

Usu√°rio: "Receita de pizza?"
Resposta: "N√£o sou especialista em culin√°ria. Posso ajudar com problemas t√©cnicos ou quest√µes de suporte?"

Usu√°rio: "O sistema est√° lento"
Resposta: "Vamos resolver isso! Me conte mais detalhes: quando come√ßou a lentid√£o? Afeta alguma funcionalidade espec√≠fica?"`
    ),
  },
  personal: {
    name: 'Assistente Pessoal',
    systemPrompt: createSystemPrompt(
      'PRODUTIVIDADE E ORGANIZA√á√ÉO',
      'Gest√£o de tempo, organiza√ß√£o pessoal, planejamento, automa√ß√£o de tarefas, produtividade',
      `Usu√°rio: "Qual o clima hoje?"
Resposta: "N√£o tenho acesso a dados meteorol√≥gicos. Como posso ajudar com sua organiza√ß√£o ou produtividade?"

Usu√°rio: "Como fazer investimentos?"
Resposta: "N√£o sou especialista financeiro. Posso ajudar com organiza√ß√£o pessoal, planejamento de tarefas ou produtividade?"

Usu√°rio: "Como organizar minha agenda?"
Resposta: "√ìtimo! Vou te ajudar a organizar sua agenda. Quais s√£o suas principais atividades e qual sua maior dificuldade atual?"`
    ),
  },
};

const generateResponse = async (message, persona = 'personal', mode = 'expert', conversationHistory = []) => {
  try {
    const selectedPersona = personas[persona] || personas.personal;
    
    // Function to handle quick start messages
    const handleQuickStartMessage = (message, persona) => {
      const lowerMessage = message.toLowerCase();
      
      // Legal assistant responses
      if (persona === 'legal') {
        if (lowerMessage.includes('peti√ß√£o')) {
          return 'Perfeito! Para ajudar com peti√ß√µes, preciso de algumas informa√ß√µes:\n\n1. Qual tipo de peti√ß√£o voc√™ precisa? (inicial, recurso, contesta√ß√£o, etc.)\n2. Qual a √°rea do direito? (civil, trabalhista, criminal, etc.)\n3. Voc√™ j√° tem algum modelo ou refer√™ncia?\n\nMe conte mais detalhes para eu orient√°-lo melhor.';
        }
        if (lowerMessage.includes('contrato')) {
          return '√ìtimo! Para an√°lise de contratos, vou precisar saber:\n\n1. Que tipo de contrato √©? (presta√ß√£o de servi√ßos, compra e venda, loca√ß√£o, etc.)\n2. Voc√™ quer revisar um contrato existente ou criar um novo?\n3. Quais s√£o as principais cl√°usulas que te preocupam?\n\nCompartilhe os detalhes para uma orienta√ß√£o mais espec√≠fica.';
        }
        if (lowerMessage.includes('consultoria')) {
          return 'Excelente! Estou aqui para orienta√ß√µes jur√≠dicas. Para te ajudar melhor:\n\n1. Qual √°rea do direito envolve sua quest√£o?\n2. √â uma situa√ß√£o pessoal ou empresarial?\n3. Voc√™ j√° consultou algum advogado sobre isso?\n\nLembre-se: minhas orienta√ß√µes s√£o b√°sicas e n√£o substituem consulta com advogado especializado.';
        }
        if (lowerMessage.includes('pesquisa')) {
          return 'Perfeito para pesquisa jur√≠dica! Me informe:\n\n1. Qual lei ou tema voc√™ precisa pesquisar?\n2. √â para um caso espec√≠fico ou estudo geral?\n3. Precisa de jurisprud√™ncia de algum tribunal espec√≠fico?\n\nVou te ajudar a encontrar as informa√ß√µes mais relevantes.';
        }
      }

      // Sales assistant responses
      if (persona === 'sales') {
        if (lowerMessage.includes('qualifica√ß√£o')) {
          return '√ìtima escolha! Para qualifica√ß√£o eficaz de leads:\n\n1. Qual seu produto/servi√ßo atual?\n2. Quem √© seu cliente ideal?\n3. Qual sua maior dificuldade na prospec√ß√£o?\n\nVou criar uma estrat√©gia personalizada de qualifica√ß√£o para voc√™!';
        }
        if (lowerMessage.includes('script')) {
          return 'Excelente! Para criar scripts de vendas eficazes:\n\n1. √â para vendas por telefone, presencial ou online?\n2. Qual o valor m√©dio do seu produto/servi√ßo?\n3. Quais obje√ß√µes voc√™ mais escuta?\n\nVamos criar um roteiro que converte mais!';
        }
        if (lowerMessage.includes('obje√ß√µes')) {
          return 'Perfeito! Vamos trabalhar no tratamento de obje√ß√µes:\n\n1. Quais as 3 obje√ß√µes mais comuns que voc√™ recebe?\n2. Como voc√™ responde atualmente?\n3. Qual sua taxa de fechamento atual?\n\nVou te ensinar t√©cnicas poderosas para superar resist√™ncias!';
        }
        if (lowerMessage.includes('estrat√©gia')) {
          return '√ìtimo! Para desenvolver uma estrat√©gia de vendas vencedora:\n\n1. Qual seu segmento de mercado?\n2. Quantos contatos voc√™ faz por dia?\n3. Qual seu maior desafio nas vendas?\n\nVamos criar um plano estruturado para multiplicar seus resultados!';
        }
      }

      // Support assistant responses
      if (persona === 'support') {
        if (lowerMessage.includes('problemas')) {
          return 'Perfeito! Para resolu√ß√£o eficaz de problemas:\n\n1. Que tipo de problemas voc√™ mais atende?\n2. Qual o volume de solicita√ß√µes por dia?\n3. Qual sua maior dificuldade no atendimento?\n\nVou te ajudar a criar processos mais eficientes!';
        }
        if (lowerMessage.includes('atendimento')) {
          return 'Excelente escolha! Para melhorar o atendimento:\n\n1. Qual canal voc√™ mais utiliza? (telefone, chat, email)\n2. Como voc√™ mede satisfa√ß√£o do cliente?\n3. Qual o tempo m√©dio de resolu√ß√£o?\n\nVamos otimizar sua experi√™ncia de atendimento!';
        }
        if (lowerMessage.includes('tickets')) {
          return '√ìtimo! Para gest√£o eficiente de tickets:\n\n1. Voc√™ usa alguma ferramenta espec√≠fica?\n2. Como categoriza as solicita√ß√µes?\n3. Qual o volume m√©dio de tickets?\n\nVou te ajudar a organizar e priorizar melhor!';
        }
        if (lowerMessage.includes('conhecimento')) {
          return 'Perfeita escolha! Para criar uma base de conhecimento:\n\n1. Que tipo de informa√ß√µes precisa documentar?\n2. Quem ser√° o p√∫blico-alvo?\n3. J√° tem algum conte√∫do organizado?\n\nVamos estruturar um sistema de informa√ß√µes eficiente!';
        }
      }

      // Personal assistant responses
      if (persona === 'personal') {
        if (lowerMessage.includes('produtividade')) {
          return '√ìtima escolha! Para aumentar sua produtividade:\n\n1. Quais suas principais atividades di√°rias?\n2. Onde voc√™ perde mais tempo?\n3. Usa alguma t√©cnica de gest√£o de tempo?\n\nVou te ajudar a otimizar sua rotina e ser mais eficiente!';
        }
        if (lowerMessage.includes('organiza√ß√£o')) {
          return 'Perfeito! Para melhor organiza√ß√£o:\n\n1. O que voc√™ mais precisa organizar? (tarefas, arquivos, agenda)\n2. Prefere m√©todos digitais ou f√≠sicos?\n3. Qual sua maior dificuldade para se manter organizado?\n\nVamos criar um sistema que funcione para voc√™!';
        }
        if (lowerMessage.includes('planejamento')) {
          return 'Excelente! Para planejamento eficaz:\n\n1. √â planejamento pessoal ou profissional?\n2. Qual o prazo? (di√°rio, semanal, mensal, anual)\n3. Quais s√£o seus principais objetivos?\n\nVou te ajudar a criar um plano estruturado e realiz√°vel!';
        }
        if (lowerMessage.includes('geral')) {
          return '√ìtimo! Estou aqui para ajuda geral:\n\n1. Qual √°rea voc√™ precisa de suporte?\n2. √â algo espec√≠fico ou uma d√∫vida geral?\n3. Tem urg√™ncia ou posso explicar com detalhes?\n\nMe conte o que precisa e vamos resolver juntos!';
        }
      }

      // Fallback for quick start messages
      return 'Entendi que voc√™ selecionou uma op√ß√£o espec√≠fica! Me conte mais detalhes sobre o que precisa para eu poder ajud√°-lo melhor.';
    };

    // Function to generate appropriate mock responses based on message content
    const generateMockResponse = (message, persona) => {
      const lowerMessage = message.toLowerCase().trim();
      
      // Simple greetings
      if (lowerMessage.match(/^(oi|ol√°|ola|hello|hi|hey)$/)) {
        const greetings = {
          legal: 'Ol√°! Sou seu assistente jur√≠dico. Em que posso ajud√°-lo hoje?',
          sales: 'Oi! Sou seu assistente de vendas. Como posso te ajudar a fechar mais neg√≥cios?',
          support: 'Ol√°! Sou seu assistente de suporte. Qual problema posso ajud√°-lo a resolver?',
          personal: 'Oi! Sou seu assistente pessoal. Em que posso ser √∫til hoje?'
        };
        return greetings[persona] || greetings.personal;
      }
      
      // Well-being questions
      if (lowerMessage.includes('como vai') || lowerMessage.includes('tudo bem') || 
          lowerMessage.includes('est√° bem') || lowerMessage.includes('voc√™ est√° bem') ||
          lowerMessage.includes('como est√°') || lowerMessage.includes('como vc est√°')) {
        return 'Estou bem, obrigado por perguntar! Como posso ajud√°-lo?';
      }
      
      // Thanks
      if (lowerMessage.includes('obrigado') || lowerMessage.includes('valeu') || 
          lowerMessage.includes('muito obrigado') || lowerMessage.includes('obrigada')) {
        return 'De nada! Precisando de mais alguma coisa, √© s√≥ falar.';
      }
      
      // Common conversational phrases
      if (lowerMessage.includes('qual seu nome') || lowerMessage.includes('quem √© voc√™') ||
          lowerMessage.includes('quem voc√™ √©')) {
        const introductions = {
          legal: 'Sou seu Assistente Jur√≠dico, especializado em orienta√ß√µes legais.',
          sales: 'Sou seu Assistente de Vendas, aqui para ajudar com estrat√©gias comerciais.',
          support: 'Sou seu Assistente de Suporte, pronto para resolver seus problemas.',
          personal: 'Sou seu Assistente Pessoal, aqui para ajudar com suas tarefas.'
        };
        return introductions[persona] || introductions.personal;
      }
      
      // Help requests
      if (lowerMessage.includes('pode me ajudar') || lowerMessage.includes('preciso de ajuda') ||
          lowerMessage.includes('me ajuda') || lowerMessage.includes('ajude-me')) {
        const helpResponses = {
          legal: 'Claro! Posso ajudar com quest√µes jur√≠dicas. O que voc√™ precisa?',
          sales: 'Certamente! Vou ajudar voc√™ com vendas. Qual √© sua d√∫vida?',
          support: '√â claro! Estou aqui para resolver problemas. Me conte o que aconteceu.',
          personal: 'Com certeza! Posso ajudar com v√°rias tarefas. O que voc√™ precisa?'
        };
        return helpResponses[persona] || helpResponses.personal;
      }

      // Quick start options detection
      if (lowerMessage.includes('gostaria de ajuda com:')) {
        return handleQuickStartMessage(message, persona);
      }
      
      // Default responses for unmatched messages - more natural
      const defaultResponses = {
        legal: 'Posso ajudar com quest√µes jur√≠dicas. O que voc√™ gostaria de saber?',
        sales: 'Como posso ajudar voc√™ a melhorar suas vendas?',
        support: 'Estou aqui para ajudar. Me conte qual √© o problema.',
        personal: 'Como posso ser √∫til para voc√™ hoje?'
      };
      
      return defaultResponses[persona] || defaultResponses.personal;
    };

    // Try Groq API first
    console.log('üîç Tentando Groq API...');
    console.log('üîë API Key:', process.env.GROQ_API_KEY ? 'CONFIGURADA' : 'N√ÉO ENCONTRADA');
    console.log('ü§ñ Modelo:', process.env.GROQ_MODEL);
    try {
      // Select system prompt based on mode
      const systemPrompt = mode === 'free' 
        ? `Voc√™ √© um assistente de IA vers√°til e √∫til. Responda a qualquer pergunta de forma natural, educada e informativa. Seja prestativo e aborde qualquer t√≥pico que o usu√°rio perguntar.

FORMATA√á√ÉO DAS RESPOSTAS:
- Use **negrito** para destacar informa√ß√µes importantes
- Use quebras de linha para organizar o texto
- Organize respostas em se√ß√µes claras quando apropriado`
        : selectedPersona.systemPrompt;

      // Build conversation history for context
      const messages = [
        {
          role: 'system',
          content: systemPrompt,
        },
      ];

      // Add conversation history (last 10 messages for context)
      const recentHistory = conversationHistory.slice(-10);
      recentHistory.forEach((msg) => {
        messages.push({
          role: msg.is_bot ? 'assistant' : 'user',
          content: msg.text,
        });
      });

      // Add current user message
      messages.push({
        role: 'user',
        content: message,
      });

      const completion = await groq.chat.completions.create({
        model: process.env.GROQ_MODEL || 'llama-3.1-70b-versatile',
        messages: messages,
        max_tokens: parseInt(process.env.MAX_TOKENS || '500'),
        temperature: parseFloat(process.env.TEMPERATURE || '0.7'),
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
      });

      return completion.choices[0].message.content.trim();
    } catch (apiError) {
      console.log('Groq API failed, using mock response:', apiError.message);
      
      // Use intelligent mock response as fallback based on mode
      if (mode === 'free') {
        return 'Desculpe, n√£o consegui processar sua mensagem no momento. Tente novamente em alguns instantes.';
      } else {
        return generateMockResponse(message, persona);
      }
    }
  } catch (error) {
    console.error('Service Error:', error);
    throw new Error('Failed to generate response. Please try again.');
  }
};

const validateApiKey = () => {
  if (!process.env.GROQ_API_KEY) {
    throw new Error('GROQ_API_KEY environment variable is required');
  }
  return true;
};

module.exports = {
  generateResponse,
  validateApiKey,
  personas,
};